# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1c7Jvift0K97wRiBZPZFKZMfZRuKcgeP2
"""

import streamlit as st
import pandas as pd
import pickle
from sklearn.datasets import load_iris
from sklearn.metrics import classification_report, confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt

# Load model and data
@st.cache_resource
def load_model():
    with open("random_forest_model", "rb") as f:
        return pickle.load(f)

@st.cache_data
def load_data():
    data = load_iris()
    df = pd.DataFrame(data.data, columns=data.feature_names)
    df['target'] = data.target
    df['species'] = df['target'].apply(lambda x: data.target_names[x])
    return df, data

model = load_model()
df, iris_data = load_data()

# Page config
st.set_page_config(page_title="Iris Classifier", layout="centered")

# Sidebar navigation
page = st.sidebar.selectbox("Choose a page", ["Data Description", "Make Prediction", "Model Insights"])

# Page 1: Data Description
if page == "Data Description":
    st.title("ðŸ“Š Data Description")
    st.write("This dataset contains measurements of iris flowers and their species.")
    st.dataframe(df.head())
    st.write("### Feature Info:")
    for i, name in enumerate(iris_data.feature_names):
        st.write(f"- **{name}**: Numeric value representing flower measurement")

    st.write("### Class Labels:")
    st.write(dict(enumerate(iris_data.target_names)))

# Page 2: Prediction
elif page == "Make Prediction":
    st.title("ðŸ”® Iris Species Prediction")
    st.write("Enter the measurements:")

    sepal_length = st.slider('Sepal length (cm)', 4.0, 8.0, 5.0)
    sepal_width = st.slider('Sepal width (cm)', 2.0, 4.5, 3.0)
    petal_length = st.slider('Petal length (cm)', 1.0, 7.0, 4.0)
    petal_width = st.slider('Petal width (cm)', 0.1, 2.5, 1.0)

    features = [[sepal_length, sepal_width, petal_length, petal_width]]

    if st.button("Predict"):
        prediction = model.predict(features)[0]
        species = iris_data.target_names[prediction]
        st.success(f"The predicted species is: **{species}** ðŸŒ¸")

# Page 3: Model Insights
else:
    st.title("ðŸ“ˆ Model Insights")
    st.write("Evaluation on full dataset using the trained model:")

    X, y = iris_data.data, iris_data.target
    y_pred = model.predict(X)

    st.write("### Classification Report:")
    report = classification_report(y, y_pred, target_names=iris_data.target_names, output_dict=True)
    st.dataframe(pd.DataFrame(report).transpose())

    st.write("### Confusion Matrix:")
    cm = confusion_matrix(y, y_pred)
    fig, ax = plt.subplots()
    sns.heatmap(cm, annot=True, fmt='d', cmap="Blues", xticklabels=iris_data.target_names, yticklabels=iris_data.target_names, ax=ax)
    plt.xlabel("Predicted")
    plt.ylabel("Actual")
    st.pyplot(fig)
